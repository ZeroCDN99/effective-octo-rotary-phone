import os
import re
import logging
import asyncio
import tempfile
import shutil
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
import yt_dlp

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
BOT_TOKEN = "7865242401:AAFi1WUf5QwzBVsj8Uc2eswtoDKSZb3qUiU"  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather
ALLOWED_USER_ID = 984155832  # –í–∞—à Telegram ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ==================== –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ü–õ–ê–¢–§–û–†–ú ====================
PLATFORM_PATTERNS = {
    'tiktok': re.compile(r'(https?://)?(www\.)?(tiktok\.com|vm\.tiktok\.com)'),
    'instagram': re.compile(r'(https?://)?(www\.)?(instagram\.com|instagr\.am)'),
    'pinterest': re.compile(r'(https?://)?(www\.)?(pinterest\.|pin\.it)')
}

# ==================== –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò ====================
def detect_platform(url):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ URL"""
    for platform, pattern in PLATFORM_PATTERNS.items():
        if pattern.search(url):
            return platform
    return None

def download_content(url, temp_dir):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    ydl_opts = {
        'format': 'best[ext=mp4]/best',
        'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
        'quiet': True,
        'no_warnings': True,
        'extract_flat': False,
        'max_filesize': 50 * 1024 * 1024,  # 50 MB –ª–∏–º–∏—Ç
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info = ydl.extract_info(url, download=False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            filesize = info.get('filesize') or info.get('filesize_approx', 0)
            if filesize > 50 * 1024 * 1024:
                return {
                    'success': False,
                    'error': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {filesize / 1024 / 1024:.1f} MB (–º–∞–∫—Å. 50 MB)'
                }
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            ydl.download([url])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            title = info.get('title', 'Media')
            uploader = info.get('uploader', 'Unknown')
            duration = info.get('duration', 0)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            files = []
            for filename in os.listdir(temp_dir):
                if filename != '.gitkeep':
                    files.append(os.path.join(temp_dir, filename))
            
            if not files:
                return {'success': False, 'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏'}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            file_path = files[0]
            is_video = file_path.endswith(('.mp4', '.webm', '.mov', '.avi'))
            
            return {
                'success': True,
                'file_path': file_path,
                'title': title,
                'uploader': uploader,
                'duration': duration,
                'is_video': is_video,
                'multiple_files': len(files) > 1,
                'all_files': files
            }
            
    except Exception as e:
        error_msg = str(e)
        if 'Private video' in error_msg:
            return {'success': False, 'error': '–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ'}
        elif 'Video unavailable' in error_msg:
            return {'success': False, 'error': '–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
        else:
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}'}

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑:\n\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram (Reels, Posts, IGTV)\n"
        "‚Ä¢ Pinterest\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É!"
    )

@dp.message(F.text.regexp(r'https?://'))
async def handle_url(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫"""
    if message.from_user.id != ALLOWED_USER_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    url = message.text.strip()
    platform = detect_platform(url)
    
    if not platform:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞!\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: TikTok, Instagram, Pinterest"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await message.answer(
        f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å {platform.capitalize()}...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = tempfile.mkdtemp()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        result = download_content(url, temp_dir)
        
        if result['success']:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            caption = f"‚úÖ {result['title']}\n"
            if result['uploader'] != 'Unknown':
                caption += f"üë§ {result['uploader']}\n"
            if result['duration'] > 0:
                minutes = result['duration'] // 60
                seconds = result['duration'] % 60
                caption += f"‚è± {minutes}:{seconds:02d}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª(—ã)
            if result['multiple_files']:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ (–æ–±—ã—á–Ω–æ –¥–ª—è Instagram –∫–∞—Ä—É—Å–µ–ª–µ–π)
                media_group = []
                for i, file_path in enumerate(result['all_files'][:10]):  # –ú–∞–∫—Å–∏–º—É–º 10
                    if file_path.endswith(('.mp4', '.webm', '.mov')):
                        media_group.append(types.InputMediaVideo(
                            media=FSInputFile(file_path),
                            caption=caption if i == 0 else None
                        ))
                    else:
                        media_group.append(types.InputMediaPhoto(
                            media=FSInputFile(file_path),
                            caption=caption if i == 0 else None
                        ))
                
                await message.answer_media_group(media_group)
            else:
                # –û–¥–∏–Ω —Ñ–∞–π–ª
                if result['is_video']:
                    await message.answer_video(
                        video=FSInputFile(result['file_path']),
                        caption=caption
                    )
                else:
                    await message.answer_photo(
                        photo=FSInputFile(result['file_path']),
                        caption=caption
                    )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_msg.delete()
            
        else:
            # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            await status_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {result['error']}"
            )
    
    except Exception as e:
        logger.error(f"Error processing {url}: {e}")
        await status_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        )
    
    finally:
        # –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—Å–µ —Ñ–∞–π–ª—ã
        try:
            shutil.rmtree(temp_dir)
            logger.info(f"Cleaned up temp directory: {temp_dir}")
        except Exception as e:
            logger.error(f"Error cleaning up {temp_dir}: {e}")

@dp.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id != ALLOWED_USER_ID:
        return
    
    await message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑:\n"
        "‚Ä¢ TikTok\n"
        "‚Ä¢ Instagram\n"
        "‚Ä¢ Pinterest"
    )

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info(f"Starting bot for user ID: {ALLOWED_USER_ID}")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–¥–ª—è pythonanywhere)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())